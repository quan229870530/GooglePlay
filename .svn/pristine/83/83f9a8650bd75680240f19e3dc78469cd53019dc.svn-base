package org.itheima.googleplay10.fragment;

import org.itheima.googleplay10.R;
import org.itheima.googleplay10.manager.ThreadPoolManager;
import org.itheima.googleplay10.utils.UIUtils;

import android.content.Context;
import android.util.AttributeSet;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.FrameLayout;

/**
 * @项目名: GooglePlay10
 * @包名: org.itheima.googleplay10.fragment
 * @类名: LoadingUI
 * @创建者: 肖琦
 * @创建时间: 2015-8-23 上午8:55:59
 * @描述: TODO
 * 
 * @svn版本: $Rev$
 * @更新人: $Author$
 * @更新时间: $Date$
 * @更新描述: TODO
 */
public abstract class LoadingUI extends FrameLayout implements OnClickListener
{
	// 容器(加载中，加载失败，加载为空,加载成功)//切换页面显示

	private static final int	STATE_NONE		= 0;			// 没有状态
	private static final int	STATE_LOADING	= 1;
	private static final int	STATE_ERROR		= 2;
	private static final int	STATE_EMPTY		= 3;
	private static final int	STATE_SUCCESS	= 4;

	private View				mLoadingView;					// 加载中
	private View				mErrorView;					// 加载失败
	private View				mEmptyView;					// 加载为空
	private View				mSucessView;					// 成功的view

	private Button				mBtnRetry;

	private int					mCurrentState	= STATE_NONE;	// 记录当前的状态

	public LoadingUI(Context context) {
		this(context, null);
	}

	public LoadingUI(Context context, AttributeSet attrs) {
		super(context, attrs);

		// 添加view到容器中

		// 加载中
		if (mLoadingView == null)
		{
			mLoadingView = View.inflate(getContext(), R.layout.pager_loading, null);
			addView(mLoadingView);
		}

		// 加载失败
		if (mErrorView == null)
		{
			mErrorView = View.inflate(getContext(), R.layout.pager_error, null);
			addView(mErrorView);

			mBtnRetry = (Button) mErrorView.findViewById(R.id.error_btn_retry);
			mBtnRetry.setOnClickListener(this);
		}
		// 加载为空
		if (mEmptyView == null)
		{
			mEmptyView = View.inflate(getContext(), R.layout.pager_empty, null);
			addView(mEmptyView);
		}

		// 根据当前的状态判断UI显示
		updateUI();
	}

	/**
	 * 安全的更新UI
	 */
	private void safeUpdateUI()
	{
		UIUtils.post(new Runnable() {

			@Override
			public void run()
			{
				updateUI();
			}
		});
	}

	private void updateUI()
	{
		// 根据当前的状态判断UI显示
		// if (mCurrentState == STATE_NONE || mCurrentState == STATE_LOADING)
		// {
		// mLoadingView.setVisibility(View.VISIBLE);
		// }
		// else
		// {
		// mLoadingView.setVisibility(View.GONE);
		// }

		// 加载中的是否显示
		mLoadingView.setVisibility((mCurrentState == STATE_NONE || mCurrentState == STATE_LOADING)
																									? View.VISIBLE : View.GONE);

		// 加载失败是否显示
		mErrorView.setVisibility(mCurrentState == STATE_ERROR ? View.VISIBLE : View.GONE);

		// 加载为空是否显示
		mEmptyView.setVisibility(mCurrentState == STATE_EMPTY ? View.VISIBLE : View.GONE);

		if (mSucessView == null && mCurrentState == STATE_SUCCESS)
		{
			// 新建成功的view
			mSucessView = onLoadSuccessView();
			// 添加
			addView(mSucessView);
		}

		// 加载成功是否显示
		if (mSucessView != null)
		{
			mSucessView.setVisibility(mCurrentState == STATE_SUCCESS ? View.VISIBLE : View.GONE);
		}
	}

	// 行为：
	// 加载数据--加载的方式不一样
	// ----> 加载失败 --->显示失败
	// ----> 加载为空 --->显示为空
	// ----> 加载成功--->显示成功
	public void loadData()
	{
		// 如果成功时,正在加载中，不做操作
		if (mCurrentState == STATE_LOADING || mCurrentState == STATE_SUCCESS) { return; }

		// none,error,empty
		// 状态改变
		mCurrentState = STATE_LOADING;
		safeUpdateUI();

		// 耗时操作
		ThreadPoolManager.getLongPool().execute(new LoadDataTask());
		// new Thread(new LoadDataTask()).start();
	}

	private class LoadDataTask implements Runnable
	{

		@Override
		public void run()
		{
			// 行为：
			// 加载数据--加载的方式不一样
			// ----> 加载失败 --->显示失败
			// ----> 加载为空 --->显示为空
			// ----> 加载成功--->显示成功

			// 去加载数据
			ResultState resultState = onLoadData();

			// 知道结果
			mCurrentState = resultState.getState();

			// 更新UI
			safeUpdateUI();
		}
	}

	/**
	 * 加载数据的方法
	 * 
	 * @return 返回结果状态
	 */
	protected abstract ResultState onLoadData();

	/**
	 * 加载成功的view的方法
	 * 
	 * @return
	 */
	protected abstract View onLoadSuccessView();

	public enum ResultState
	{
		EMPTY(STATE_EMPTY), ERROR(STATE_ERROR), SUCCESS(STATE_SUCCESS);

		private int	state;

		private ResultState(int state) {
			this.state = state;
		}

		public int getState()
		{
			return state;
		}
	}

	@Override
	public void onClick(View v)
	{
		if (v == mBtnRetry)
		{
			// 重新获取数据
			loadData();
		}
	}
}
